# –ó–∞–¥–∞—á–∞ "–ü—Ä–æ–¥—É–∫—Ç–æ–≤–∞—è –±–∞–∑–∞"
# aiogram 3.15, python 3.11

from aiogram import Bot, Dispatcher, types, Router, F
from aiogram.fsm.storage.memory import MemoryStorage # –±—É–¥–µ–º —Ö—Ä–∞–Ω–∏—Ç—å FSM –≤ –ø–∞–º—è—Ç–∏.
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import Command, CommandStart
from aiogram.enums import ParseMode
from aiogram.types import (
    KeyboardButton,
    Message,
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove,
    InlineKeyboardButton,
    CallbackQuery,
    FSInputFile
)
from aiogram.client.default import DefaultBotProperties
from aiogram.utils.keyboard import InlineKeyboardBuilder

import asyncio
#import logging
import re

import config
from crud_functions_5 import *


router = Router()

class UserState(StatesGroup):
    age = State()
    growth = State()
    weight = State()

class RegistrationState(StatesGroup):
    username = State()
    email = State()
    age = State()
    balance = State(1000)

# –í—ã–¥–µ–ª—è–µ—Ç —á–∏—Å–ª–æ –∏–∑ —Å—Ç—Ä–æ–∫–∏ —Å–æ —Å–ª–æ–≤–∞–º–∏.
# –ù–∞–ø—Ä–∏–º–µ—Ä, –∏–∑ —Å—Ç—Ä–æ–∫–∏ "–º–Ω–µ 20 –ª–µ—Ç" - —Ñ—É–Ω–∫—Ü–∏—è –≤–µ—Ä–Ω–µ—Ç —á–∏—Å–ª–æ 20
def extract_number(text):
    match = re.search(r'\b(\d+)\b', text)
    if match:
        return int(match.group(1))
    else:
        return None

# –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ—Å—Ç–æ–∏—Ç –ª–∏ –∏–º—è —Ç–æ–ª—å–∫–æ –∏–∑ –ª–∞—Ç–∏–Ω—Å–∫–∏—Ö –±—É–∫–≤
def validate_name(name: str) -> bool:
    valid_pattern = re.compile(r"^[a-z]+$", re.I)
    return bool(valid_pattern.match(name))

# –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ—Å—Ç–æ–∏—Ç –ª–∏ –∏–º—è —Ç–æ–ª—å–∫–æ –∏–∑ –ª–∞—Ç–∏–Ω—Å–∫–∏—Ö –±—É–∫–≤
def validate_email(email: str) -> bool:
    valid_pattern = re.compile(r'([A-Za-z0-9]+[.-_])*[A-Za-z0-9]+@[A-Za-z0-9-]+(\.[A-Z|a-z]{2,})+')
    return bool(valid_pattern.match(email))

@router.message(CommandStart())
async def send_welcome(message: types.Message):
    await message.answer('–í–≤–µ–¥–∏—Ç–µ <b>"–†–∞—Å—Å—á–∏—Ç–∞—Ç—å"</b>, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞—Å—Å—á–µ—Ç –í–∞—à–µ–π –Ω–æ—Ä–º—ã –∫–∞–ª–æ—Ä–∏–π.',
                         reply_markup=ReplyKeyboardMarkup(keyboard=[
                             [
                                 KeyboardButton(text="–†–∞—Å—Å—á–∏—Ç–∞—Ç—å"),
                                 KeyboardButton(text="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"),
                             ],
                             [
                                KeyboardButton(text="–ö—É–ø–∏—Ç—å"),
                                KeyboardButton(text="–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"),
                             ],
                         ],
                             resize_keyboard=True,
                             one_time_keyboard=True,
                             input_field_placeholder="–ù–∞–∂–º–∏—Ç–µ –ª—é–±—É—é –∫–Ω–æ–ø–∫—É"
                         )
    )

@router.message(F.text=='–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')
async def info(message, bot: Bot):
    # –ß—Ç–æ–±—ã –∏–º–µ—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–∫–∞–∑–∞—Ç—å ID-–∫–Ω–æ–ø–∫—É, —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å False —Ñ–ª–∞–≥ has_private_forwards
    user_id = message.from_user.id
    chat_info = await bot.get_chat(user_id)
    if not chat_info.has_private_forwards:
        builder = InlineKeyboardBuilder()
        # builder.row(types.InlineKeyboardButton(text="–û—Ñ. –∫–∞–Ω–∞–ª Telegram", url="tg://resolve?domain=telegram"))
        builder.row(InlineKeyboardButton(text="–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ", url=f"tg://user?id={user_id}"))
        await message.answer('–î–æ–±—Ä–æ–≥–æ –¥–Ω—è! –Ø –±–æ—Ç, –ø–æ–º–æ–≥–∞—é—â–∏–π <b>–í–∞—à–µ–º—É</b> –∑–¥–æ—Ä–æ–≤—å—é.', reply_markup=builder.as_markup())
    else:
        await message.answer('–î–æ–±—Ä–æ–≥–æ –¥–Ω—è! –Ø –±–æ—Ç, –ø–æ–º–æ–≥–∞—é—â–∏–π <b>–í–∞—à–µ–º—É</b> –∑–¥–æ—Ä–æ–≤—å—é.')


@router.message(F.text=='–ö—É–ø–∏—Ç—å')
async def get_buying_list(message):
    # –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –æ —Ç–æ–≤–∞—Ä–∞—Ö
    productsData = get_all_products() #crud_functions_4.get_all_products()
    if not productsData:
        await message.answer("–ù–µ —É–¥–∞—ë—Ç—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–≤–∞—Ä–∞—Ö")
        return

    builder = InlineKeyboardBuilder()
    isProduct = False
    number = 1
    for product in productsData:
        try:
            image_from_pc = FSInputFile(f"files/image{number}.png")
            await message.answer_photo(photo=image_from_pc,
                                        caption=f'–ù–∞–∑–≤–∞–Ω–∏–µ: {product["title"]} | ' +
                                                f'–û–ø–∏—Å–∞–Ω–∏–µ: {product["description"]} | \n' +
                                                f'–¶–µ–Ω–∞: {product["price"]}')
            builder.add(InlineKeyboardButton(text=product["title"],
                                             callback_data="product_buying"))
            isProduct = True
            number += 1
        except:
            logger.error(f'File not found: files/image{number}.png') #, exc_info=True)

    if isProduct:
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–±–µ—á –¥–ª—è –ø–æ–∫—É–ø–∫–∏:", reply_markup=builder.as_markup())
    else:
        await message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –≤—Å–µ —Ç–æ–≤–∞—Ä—ã —Ä–∞—Å–ø—Ä–æ–¥–∞–Ω—ã! –ü—Ä–∏—Ö–æ–¥–∏—Ç–µ –∑–∞–≤—Ç—Ä–∞!")


@router.callback_query(F.data == "product_buying")
async def send_confirm_message(callback: CallbackQuery):
    await callback.message.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–æ–±—Ä–µ–ª–∏ –ø—Ä–æ–¥—É–∫—Ç!")


@router.message(F.text=='–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è')
async def sing_up(message, state: FSMContext):
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–∏–π –∞–ª—Ñ–∞–≤–∏—Ç):')
    await state.set_state(RegistrationState.username)

@router.message(RegistrationState.username)
async def set_username(message: Message, state: FSMContext):
    username = message.text
    if is_included(username):
        await message.reply('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –ë–î, –≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –∏–º—è:')
        return
    if not validate_name(username):
        await message.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è (—Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–∏–π –∞–ª—Ñ–∞–≤–∏—Ç):')
        return
    await state.update_data(username=username)
    await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π email:')
    await state.set_state(RegistrationState.email)

@router.message(RegistrationState.email)
async def set_email(message: Message, state: FSMContext):
    email = message.text
    if not validate_email(email):
        await message.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email:')
        return
    await state.update_data(email=email)
    await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç:')
    await state.set_state(RegistrationState.age)

@router.message(RegistrationState.age)
async def set_age(message: Message, state: FSMContext):
    check_age = extract_number(message.text)
    if not check_age or not (1 <= check_age <= 150):
        await message.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (—á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 150).')
        return
    data = await state.update_data(age=check_age)
    add_user(data['username'], data['email'], data['age'])
    await message.answer('–†–µ–≥–∏—Å—Ç–∞—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!')
    await state.clear()


@router.message(F.text=='–†–∞—Å—Å—á–∏—Ç–∞—Ç—å')
async def main_menu(message):
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –Ω–æ—Ä–º—É –∫–∞–ª–æ—Ä–∏–π", callback_data='calories'))
    builder.add(InlineKeyboardButton(text="–§–æ—Ä–º—É–ª–∞ —Ä–∞—Å—á—ë—Ç–∞", callback_data='formulas'))
    #await message.answer("üéÅ", reply_markup=ReplyKeyboardRemove())
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:', reply_markup=builder.as_markup())


@router.callback_query(F.data == "formulas")
async def get_formulas(callback: CallbackQuery):
    #await callback.message.answer("–í–æ—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–æ—Ä–º—É–ª—É —Ä–∞—Å—Å—á—ë—Ç–∞ –ú–∏—Ñ—Ñ–ª–∏–Ω–∞-–°–∞–Ω –ñ–µ–æ—Ä–∞: https://www.calc.ru/Formula-Mifflinasan-Zheora.html")
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏ –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∞ —Ñ–æ—Ä–º—É–ª—É —Ä–∞—Å—Å—á—ë—Ç–∞",
                                     url="https://www.calc.ru/Formula-Mifflinasan-Zheora.html"))
    await callback.message.answer('–•–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –æ —Ñ–æ—Ä–º—É–ª–µ —Ä–∞—Å—Å—á—ë—Ç–∞ –ú–∏—Ñ—Ñ–ª–∏–Ω–∞-–°–∞–Ω –ñ–µ–æ—Ä–∞?', reply_markup=builder.as_markup())


@router.callback_query(F.data == "calories")
async def set_age(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç (–≥–æ–¥—ã):")
    await state.set_state(UserState.age)

@router.message(UserState.age)
async def set_growth(message: Message, state: FSMContext):
    check_age = extract_number(message.text)
    if not check_age or not (1 <= check_age <= 150):
        await message.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (—á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 150).')
        return
    await state.update_data(age=check_age)
    await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π —Ä–æ—Å—Ç (—Å–º):')
    await state.set_state(UserState.growth)

@router.message(UserState.growth)
async def set_weight(message: types.Message, state: FSMContext):
    check_growth = extract_number(message.text)
    if not check_growth or not (10 <= check_growth <= 250):
        await message.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–æ—Å—Ç (—á–∏—Å–ª–æ –æ—Ç 10 –¥–æ 250).')
        return
    await state.update_data(growth=check_growth)
    await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≤–µ—Å (–∫–≥):')
    await state.set_state(UserState.weight)

@router.message(UserState.weight)
async def send_calories(message: types.Message, state: FSMContext):
    check_weight = extract_number(message.text)
    if not check_weight or not (1 <= check_weight <= 150):
        await message.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–µ—Å (—á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 150).')
        return
    data = await state.update_data(weight=check_weight)
    # –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç —Ñ–æ—Ä–º—É–ª—ã –ú–∏—Ñ—Ñ–ª–∏–Ω–∞-–°–∞–Ω –ñ–µ–æ—Ä–∞: 10 —Ö –≤–µ—Å (–∫–≥) + 6,25 x —Ä–æ—Å—Ç (—Å–º) ‚Äì 5 —Ö –≤–æ–∑—Ä–∞—Å—Ç (–≥) + 5
    counter = 10 * data["weight"] + 6.25 * data["growth"] - 5 * data["age"] + 5
    await message.answer(f'–í–∞—à–∞ –Ω–æ—Ä–º–∞ –∫–∞–ª–æ—Ä–∏–π (–ø–æ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–º—É –≤–∞—Ä–∏–∞–Ω—Ç—É —Ñ–æ—Ä–º—É–ª—ã –ú–∏—Ñ—Ñ–ª–∏–Ω–∞-–°–∞–Ω –ñ–µ–æ—Ä–∞): {counter}.')
    await state.clear()


# –≠—Ö–æ
@router.message()
async def all_message(message: types.Message):
    await message.answer(message.text + '\n' + '–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ.')


# –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ–ª–ª–∏–Ω–≥–∞
async def main():
    bot = Bot(config.token, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
    await bot.delete_webhook(drop_pending_updates=True) # –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—Å–µ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    disp = Dispatcher(storage=MemoryStorage())
    disp.include_router(router)
    await disp.start_polling(bot)

if __name__ == "__main__":
    # –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–∞–∂–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
    logger = logging.getLogger(__name__)

    initiate_db()

    # –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    asyncio.run(main())

    connectionUsers.close()
    connectionProd.close()

